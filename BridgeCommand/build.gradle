import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'

    // For using the ballerina java project API
    id 'java-library'

    // For coverage results
    id 'jacoco'

    // For SonarCloud Analysis
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'org.wso2.ballerina'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    // For Ballerina Plugins
    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    // Required dependency for developing ballerina cli applications
    implementation group: 'info.picocli', name: 'picocli', version: '4.7.5'

    // set the correct gson version
    implementation "com.google.code.gson:gson:${project.gsonVersion}"

    // Required dependencies for accessing the ballerina java project API
    // The version should match the version you have in the local machine
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${project.ballerinaVersion}"

    // Required dependencies for building a ballerina cli application
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${project.ballerinaVersion}"

    // Required Module to convert the AST to a JSON File
    implementation group: 'org.ballerinalang', name: 'diagram-util', version: "${project.ballerinaVersion}"

    // Required for working with toml documents
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${project.ballerinaVersion}"

    // Required for determining the platform a java process is running on
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Required dependencies for jacoco
    implementation group: 'org.jacoco', name: 'org.jacoco.core', version: "${project.jacocoVersion}"
    implementation group: 'org.jacoco', name: 'org.jacoco.report', version: "${project.jacocoVersion}"

    // Required dependencies for running scan tool tests
    testImplementation group: 'org.testng', name: 'testng', version: "${project.testngVersion}"
}

// Setting up the ballerina home property for the project
tasks.withType(JavaExec).configureEach {
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// Configurations to automatically build and deploy bridge tool
def packageName = "tool_bridge"
def tomlVersion = "${project.toolVersion}"
def ballerinaTomlFilePlaceHolder = new File("${projectDir}/tool-bridge/Ballerina.toml")
def balToolTomlFilePlaceHolder = new File("${projectDir}/tool-bridge/BalTool.toml")
def ballerinaTomlFile = new File("${projectDir}/tool-bridge/Ballerina.toml")
def balToolTomlFile = new File("${projectDir}/tool-bridge/BalTool.toml")
def balerinaCentralDir = System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io/bala/ballerina"
def ballerinaLocalDir = System.getProperty("user.home") + "/.ballerina/repositories/local/bala/ballerina"
def balCentralCacheDir = project.file(System.getProperty("user.home") + "/.ballerina/repositories/central.ballerina.io")
def ballerinaToolConfigDir = System.getProperty("user.home") + "/.ballerina/.config"
def ballerinaToolConfigToml = System.getProperty("user.home") + "/.ballerina/.config/bal-tools.toml"

task updateTomlFiles {
    // Update the Ballerina.toml and Dependencies.toml files
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.toolVersion@", project.toolVersion)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig

        def newToolConfig = balToolTomlFilePlaceHolder.text.replace("@project.toolVersion@", project.toolVersion)
        newToolConfig = newToolConfig.replace("@toml.version@", tomlVersion)
        balToolTomlFile.text = newToolConfig
    }
}

task createBallerinaToolConfigFile {
    // Create the bal-tools.toml file in the .ballerina/.config directory
    def configFileContent = """
        [[tool]]
        id = "bridge"
        org = "ballerina"
        name = "tool_bridge"
        version = "${project.toolVersion}"
        active = true
    """.stripIndent()

    outputs.upToDateWhen { false }
    doLast {
        if (!file(ballerinaToolConfigToml).exists()) {
            file(ballerinaToolConfigDir).mkdirs()
            file(ballerinaToolConfigToml).createNewFile()
        }

        // Retrieve existing content of toml file
        def tomlFile = file(ballerinaToolConfigToml)
        def tomlFileContent = tomlFile.text

        // Append tool to toml file if it does not exist
        if (!tomlFileContent.contains(configFileContent)) {
            tomlFile << "\n" + configFileContent
            println("Successfully created the bal-tools.toml file in the .ballerina/.config directory")
        } else {
            println("bal bridge tool already exists!")
        }
    }
}

task buildScanTool {
    doLast {
        // Pack and push to local repo of distribution
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'cd tool-bridge & bal pack & bal push --repository=local'
            } else {
                commandLine 'sh', '-c', 'cd tool-bridge ; bal pack ; bal push --repository=local'
            }
        }
        println("Successfully build and pushed the scan tool to the local repository")

        // Remove the cache directories in the central repository
        delete {
            fileTree(balCentralCacheDir).matching {
                include 'cache-*'
            }
        }
        println("Successfully cleaned the .ballerina/cache* directories")

        // Update the central repository
        def balDestinationDir = "$balerinaCentralDir/$packageName"
        def balSourceDir = "$ballerinaLocalDir/$packageName"
        if (file(balDestinationDir).exists()) {
            file(balDestinationDir).deleteDir()
        }
        copy {
            from balSourceDir
            into balDestinationDir
        }
        println("Successfully copied package from local/bala the central.ballerina.io/bala directory")
    }
}

buildScanTool.dependsOn createBallerinaToolConfigFile

build {
    dependsOn updateTomlFiles
    dependsOn createBallerinaToolConfigFile
    dependsOn buildScanTool
}

// Adding tests
tasks.test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

// Setting up for codecove
def execFile;
def classFileArray = []
task copyExecFilesAndJavaClassFiles {
    execFile = new File("${buildDir}/jacoco/test.exec")
    if (execFile.exists()) {
        fileTree("${buildDir}/classes").matching {
            exclude '**/test/*'
            exclude '**/module-info.class'
        }.each { file -> classFileArray.push(file) }
    }
}

task createCodeCoverageReport(type: JacocoReport) {
    executionData file(execFile)
    additionalClassDirs files(classFileArray)

    reports {
        xml.required = true
        html.required = true
        xml.destination new File("${rootDir}/.jacoco/reports/jacoco/report.xml")
        html.destination new File("${rootDir}/.jacoco/reports/jacoco/report.html")
    }
    onlyIf = {
        true
    }
}

createCodeCoverageReport.dependsOn(copyExecFilesAndJavaClassFiles)

// Setting up SonarCloud
sonar {
    properties {
        property "sonar.projectKey", "Xenowa_ballerina-tool-extension-methods"
        property "sonar.organization", "xenowa"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
